apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: slurm-operator
    app.kubernetes.io/managed-by: kustomize
  name: slurm-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: slurm-operator
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: slurm-operator
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: slurm-operator
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: slurm-operator
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        # Projects are configured by default to adhere to the "restricted" Pod Security Standards.
        # This ensures that deployments meet the highest security requirements for Kubernetes.
        # For more details, see: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
          - --leader-elect
          - --health-probe-bind-address=:8081
          - -ldap-default-authtok=Not@SecurePassw0rd
          - -ldap-default-authtok-type=password
          - -ldap-default-bind-dn=cn=admin,dc=example,dc=org
          - -ldap-searce-base=dc=example,dc=org
          - -ldap-skip-insecure-tls=true
          - -ldap-uri=ldap://openldap.openldap.svc.cluster.local
          - -recovering-job-image=registry.cn-hangzhou.aliyuncs.com/troila-klcloud/ubuntu-recovering:24.04
          - -recovering-job-schedule=*/5 * * * *
        image: registry.cn-hangzhou.aliyuncs.com/troila-klcloud/slurm-operator:v0.1.9
        name: manager
        ports: []
        env:
        - name: ENABLE_WEBHOOKS
          value: "false"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts: []
      volumes: []
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
